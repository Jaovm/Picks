import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import plotly.graph_objects as go
import json
import os
import yfinance as yf
from datetime import datetime, timedelta
import time
import requests
import logging
import re
from PIL import Image
import io
import base64

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Pro Picks IA - Melhores A√ß√µes Brasileiras",
    page_icon="üìà",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Diret√≥rio de dados
DATA_DIR = "dados"
os.makedirs(DATA_DIR, exist_ok=True)

# Configura√ß√£o de logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("app.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# Fun√ß√µes de utilidade
def carregar_dados_acao(ticker):
    """Carrega dados de uma a√ß√£o espec√≠fica"""
    try:
        arquivo = os.path.join(DATA_DIR, f"{ticker.replace('.', '_')}.json")
        if os.path.exists(arquivo):
            with open(arquivo, 'r', encoding='utf-8') as f:
                return json.load(f)
        else:
            # Se o arquivo n√£o existir, tenta coletar os dados
            return coletar_dados_acao(ticker)
    except Exception as e:
        st.error(f"Erro ao carregar dados para {ticker}: {e}")
        return None

def coletar_dados_acao(ticker):
    """Coleta dados de uma a√ß√£o via API do Yahoo Finance"""
    try:
        with st.spinner(f"Coletando dados para {ticker}..."):
            acao = yf.Ticker(ticker)
            
            # Dicion√°rio para armazenar todos os dados
            dados = {}
            
            # 1. Informa√ß√µes b√°sicas
            info = acao.info
            dados['info'] = info
            
            # 2. Demonstra√ß√µes financeiras
            try:
                dados['income_statement'] = acao.income_stmt.to_dict()
            except:
                dados['income_statement'] = {}
                
            try:
                dados['balance_sheet'] = acao.balance_sheet.to_dict()
            except:
                dados['balance_sheet'] = {}
                
            try:
                dados['cash_flow'] = acao.cashflow.to_dict()
            except:
                dados['cash_flow'] = {}
            
            # 3. Dados hist√≥ricos (2 anos)
            end_date = datetime.now()
            start_date = end_date - timedelta(days=2*365)
            try:
                hist = acao.history(start=start_date, end=end_date, interval="1d")
                dados['historical'] = hist.to_dict('records')
            except:
                dados['historical'] = []
            
            # 4. Dividendos
            try:
                dividends = acao.dividends.to_dict()
                dados['dividends'] = dividends
            except:
                dados['dividends'] = {}
            
            # Salvar dados em arquivo JSON
            arquivo = os.path.join(DATA_DIR, f"{ticker.replace('.', '_')}.json")
            with open(arquivo, 'w', encoding='utf-8') as f:
                json.dump(dados, f, default=str)
            
            return dados
    except Exception as e:
        st.error(f"Erro ao coletar dados para {ticker}: {e}")
        return None

def obter_lista_acoes():
    """Obt√©m a lista de a√ß√µes do Ibovespa e outras a√ß√µes relevantes do mercado brasileiro"""
    try:
        # Verificar se j√° existe um arquivo com a lista de a√ß√µes
        arquivo_lista = os.path.join(DATA_DIR, "lista_acoes.json")
        if os.path.exists(arquivo_lista):
            with open(arquivo_lista, 'r', encoding='utf-8') as f:
                return json.load(f)
        
        # Tentativa de obter composi√ß√£o do Ibovespa via yfinance
        ibov = yf.Ticker("^BVSP")
        ibov_components = ibov.components
        
        if ibov_components is not None and len(ibov_components) > 0:
            # Adicionar sufixo .SA para a√ß√µes brasileiras
            acoes = [ticker + ".SA" for ticker in ibov_components]
        else:
            # Lista manual de a√ß√µes do Ibovespa caso a API n√£o retorne
            acoes_ibov = [
                "ABEV3.SA", "ALPA4.SA", "AMER3.SA", "ASAI3.SA", "AZUL4.SA", 
                "B3SA3.SA", "BBAS3.SA", "BBDC3.SA", "BBDC4.SA", "BBSE3.SA", 
                "BEEF3.SA", "BPAC11.SA", "BRAP4.SA", "BRFS3.SA", "BRKM5.SA", 
                "CASH3.SA", "CCRO3.SA", "CIEL3.SA", "CMIG4.SA", "CMIN3.SA", 
                "COGN3.SA", "CPFE3.SA", "CPLE6.SA", "CRFB3.SA", "CSAN3.SA", 
                "CSNA3.SA", "CVCB3.SA", "CYRE3.SA", "DXCO3.SA", "EGIE3.SA", 
                "ELET3.SA", "ELET6.SA", "EMBR3.SA", "ENEV3.SA", "ENGI11.SA", 
                "EQTL3.SA", "EZTC3.SA", "FLRY3.SA", "GGBR4.SA", "GOAU4.SA", 
                "GOLL4.SA", "HAPV3.SA", "HYPE3.SA", "IGTI11.SA", "IRBR3.SA", 
                "ITSA4.SA", "ITUB4.SA", "JBSS3.SA", "KLBN11.SA", "LREN3.SA", 
                "LWSA3.SA", "MGLU3.SA", "MRFG3.SA", "MRVE3.SA", "MULT3.SA", 
                "NTCO3.SA", "PCAR3.SA", "PETR3.SA", "PETR4.SA", "PETZ3.SA", 
                "PRIO3.SA", "RADL3.SA", "RAIL3.SA", "RAIZ4.SA", "RDOR3.SA", 
                "RENT3.SA", "RRRP3.SA", "SANB11.SA", "SBSP3.SA", "SLCE3.SA", 
                "SMTO3.SA", "SOMA3.SA", "SUZB3.SA", "TAEE11.SA", "TIMS3.SA", 
                "TOTS3.SA", "UGPA3.SA", "USIM5.SA", "VALE3.SA", "VBBR3.SA", 
                "VIIA3.SA", "VIVT3.SA", "WEGE3.SA", "YDUQ3.SA"
            ]
            
            # Adicionar outras a√ß√µes relevantes fora do Ibovespa
            outras_acoes = [
                "AESB3.SA", "AURE3.SA", "AZEV4.SA", "BMGB4.SA", "BRSR6.SA",
                "CEAB3.SA", "CGAS5.SA", "CSMG3.SA", "CXSE3.SA", "DIRR3.SA",
                "EVEN3.SA", "FESA4.SA", "FRAS3.SA", "GRND3.SA", "HBOR3.SA",
                "JHSF3.SA", "KEPL3.SA", "LOGG3.SA", "MDIA3.SA", "MOVI3.SA",
                "ODPV3.SA", "POMO4.SA", "POSI3.SA", "PTBL3.SA", "QUAL3.SA",
                "ROMI3.SA", "SAPR11.SA", "SEER3.SA", "TASA4.SA", "TGMA3.SA",
                "TUPY3.SA", "VULC3.SA", "WIZS3.SA"
            ]
            
            acoes = acoes_ibov + outras_acoes
        
        # Salvar lista de a√ß√µes
        with open(arquivo_lista, 'w', encoding='utf-8') as f:
            json.dump(acoes, f)
        
        return acoes
    except Exception as e:
        st.error(f"Erro ao obter lista de a√ß√µes: {e}")
        # Lista de fallback em caso de erro
        acoes_fallback = [
            "PETR4.SA", "VALE3.SA", "ITUB4.SA", "BBDC4.SA", "B3SA3.SA",
            "ABEV3.SA", "WEGE3.SA", "RENT3.SA", "BBAS3.SA", "SUZB3.SA"
        ]
        return acoes_fallback

def obter_dados_ibovespa():
    """Obt√©m dados hist√≥ricos do Ibovespa para compara√ß√£o"""
    try:
        arquivo = os.path.join(DATA_DIR, "ibovespa_historico.csv")
        if os.path.exists(arquivo):
            return pd.read_csv(arquivo, index_col=0, parse_dates=True)
        
        with st.spinner("Coletando dados hist√≥ricos do Ibovespa..."):
            ibov = yf.Ticker("^BVSP")
            end_date = datetime.now()
            start_date = end_date - timedelta(days=2*365)
            hist = ibov.history(start=start_date, end=end_date, interval="1d")
            
            # Salvar dados em arquivo CSV
            hist.to_csv(arquivo)
            
            return hist
    except Exception as e:
        st.error(f"Erro ao obter dados do Ibovespa: {e}")
        return None

def calcular_metricas_fundamentalistas(dados):
    """Calcula m√©tricas fundamentalistas a partir dos dados da a√ß√£o"""
    metricas = {}
    
    try:
        # Extrair informa√ß√µes b√°sicas
        info = dados.get('info', {})
        income_stmt = dados.get('income_statement', {})
        balance = dados.get('balance_sheet', {})
        cash_flow = dados.get('cash_flow', {})
        
        # 1. M√©tricas de Lucratividade
        # ROE (Retorno sobre Patrim√¥nio)
        if 'netIncome' in info and 'totalStockholderEquity' in info and info['totalStockholderEquity'] != 0:
            metricas['ROE'] = (info['netIncome'] / info['totalStockholderEquity']) * 100
        else:
            metricas['ROE'] = None
        
        # ROIC (Retorno sobre Capital Investido)
        if 'ebit' in info and 'totalAssets' in info and 'totalCurrentLiabilities' in info:
            capital_investido = info['totalAssets'] - info['totalCurrentLiabilities']
            if capital_investido != 0:
                metricas['ROIC'] = (info['ebit'] * (1 - 0.34)) / capital_investido * 100  # Considerando al√≠quota de 34%
            else:
                metricas['ROIC'] = None
        else:
            metricas['ROIC'] = None
        
        # Margem L√≠quida
        if 'netIncome' in info and 'totalRevenue' in info and info['totalRevenue'] != 0:
            metricas['MargemLiquida'] = (info['netIncome'] / info['totalRevenue']) * 100
        else:
            metricas['MargemLiquida'] = None
        
        # 2. M√©tricas de Avalia√ß√£o
        # P/L (Pre√ßo/Lucro)
        metricas['PL'] = info.get('trailingPE', None)
        
        # P/VP (Pre√ßo/Valor Patrimonial)
        metricas['PVP'] = info.get('priceToBook', None)
        
        # EV/EBITDA
        metricas['EV_EBITDA'] = info.get('enterpriseToEbitda', None)
        
        # Dividend Yield
        metricas['DividendYield'] = info.get('dividendYield', 0) * 100 if info.get('dividendYield') else 0
        
        # 3. M√©tricas de Sa√∫de Financeira
        # D√≠vida/Patrim√¥nio
        if 'totalDebt' in info and 'totalStockholderEquity' in info and info['totalStockholderEquity'] != 0:
            metricas['DividaPatrimonio'] = info['totalDebt'] / info['totalStockholderEquity']
        else:
            metricas['DividaPatrimonio'] = None
        
        # Liquidez Corrente
        if 'totalCurrentAssets' in info and 'totalCurrentLiabilities' in info and info['totalCurrentLiabilities'] != 0:
            metricas['LiquidezCorrente'] = info['totalCurrentAssets'] / info['totalCurrentLiabilities']
        else:
            metricas['LiquidezCorrente'] = None
        
        # 4. Crescimento
        # Crescimento de Lucros (TTM)
        if 'earningsGrowth' in info:
            metricas['CrescimentoLucros'] = info['earningsGrowth'] * 100 if info['earningsGrowth'] else None
        else:
            metricas['CrescimentoLucros'] = None
        
        # 5. Outras M√©tricas
        # Payout
        if 'payoutRatio' in info:
            metricas['Payout'] = info['payoutRatio'] * 100 if info['payoutRatio'] else 0
        else:
            metricas['Payout'] = 0
        
        # Setor
        metricas['Setor'] = info.get('sector', 'N/A')
        
        # Ind√∫stria
        metricas['Industria'] = info.get('industry', 'N/A')
        
        # Nome da Empresa
        metricas['Nome'] = info.get('longName', info.get('shortName', 'N/A'))
        
        # Pre√ßo Atual
        metricas['PrecoAtual'] = info.get('currentPrice', info.get('regularMarketPrice', 0))
        
        # Market Cap
        metricas['MarketCap'] = info.get('marketCap', 0)
        
        # Volume M√©dio (3 meses)
        metricas['VolumeMedia3M'] = info.get('averageVolume3Month', 0)
        
        return metricas
    except Exception as e:
        st.error(f"Erro ao calcular m√©tricas fundamentalistas: {e}")
        return {}

def calcular_pontuacao(metricas, pesos):
    """Calcula a pontua√ß√£o da a√ß√£o com base nas m√©tricas e pesos definidos"""
    pontuacao = {}
    pontuacao_total = 0
    peso_total = 0
    
    # 1. Demonstra√ß√µes Financeiras e Lucratividade
    # ROE
    if metricas.get('ROE') is not None:
        roe = metricas['ROE']
        if roe > 15:
            pontuacao['ROE'] = 10
        elif roe > 12:
            pontuacao['ROE'] = 8
        elif roe > 10:
            pontuacao['ROE'] = 6
        elif roe > 5:
            pontuacao['ROE'] = 4
        elif roe > 0:
            pontuacao['ROE'] = 2
        else:
            pontuacao['ROE'] = 0
        
        pontuacao_total += pontuacao['ROE'] * pesos['ROE']
        peso_total += pesos['ROE']
    
    # ROIC
    if metricas.get('ROIC') is not None:
        roic = metricas['ROIC']
        if roic > 12:
            pontuacao['ROIC'] = 10
        elif roic > 10:
            pontuacao['ROIC'] = 8
        elif roic > 7:
            pontuacao['ROIC'] = 6
        elif roic > 5:
            pontuacao['ROIC'] = 4
        elif roic > 0:
            pontuacao['ROIC'] = 2
        else:
            pontuacao['ROIC'] = 0
        
        pontuacao_total += pontuacao['ROIC'] * pesos['ROIC']
        peso_total += pesos['ROIC']
    
    # Margem L√≠quida
    if metricas.get('MargemLiquida') is not None:
        margem = metricas['MargemLiquida']
        if margem > 20:
            pontuacao['MargemLiquida'] = 10
        elif margem > 15:
            pontuacao['MargemLiquida'] = 8
        elif margem > 10:
            pontuacao['MargemLiquida'] = 6
        elif margem > 5:
            pontuacao['MargemLiquida'] = 4
        elif margem > 0:
            pontuacao['MargemLiquida'] = 2
        else:
            pontuacao['MargemLiquida'] = 0
        
        pontuacao_total += pontuacao['MargemLiquida'] * pesos['MargemLiquida']
        peso_total += pesos['MargemLiquida']
    
    # Crescimento de Lucros
    if metricas.get('CrescimentoLucros') is not None:
        crescimento = metricas['CrescimentoLucros']
        if crescimento > 15:
            pontuacao['CrescimentoLucros'] = 10
        elif crescimento > 10:
            pontuacao['CrescimentoLucros'] = 8
        elif crescimento > 5:
            pontuacao['CrescimentoLucros'] = 6
        elif crescimento > 0:
            pontuacao['CrescimentoLucros'] = 4
        elif crescimento > -5:
            pontuacao['CrescimentoLucros'] = 2
        else:
            pontuacao['CrescimentoLucros'] = 0
        
        pontuacao_total += pontuacao['CrescimentoLucros'] * pesos['CrescimentoLucros']
        peso_total += pesos['CrescimentoLucros']
    
    # 2. Avalia√ß√£o e M√∫ltiplos
    # P/L
    if metricas.get('PL') is not None:
        pl = metricas['PL']
        if pl < 0:  # Lucro negativo
            pontuacao['PL'] = 0
        elif pl < 10:
            pontuacao['PL'] = 10
        elif pl < 15:
            pontuacao['PL'] = 8
        elif pl < 20:
            pontuacao['PL'] = 6
        elif pl < 25:
            pontuacao['PL'] = 4
        elif pl < 30:
            pontuacao['PL'] = 2
        else:
            pontuacao['PL'] = 0
        
        pontuacao_total += pontuacao['PL'] * pesos['PL']
        peso_total += pesos['PL']
    
    # P/VP
    if metricas.get('PVP') is not None:
        pvp = metricas['PVP']
        if pvp < 0:  # Patrim√¥nio negativo
            pontuacao['PVP'] = 0
        elif pvp < 1:
            pontuacao['PVP'] = 10
        elif pvp < 1.5:
            pontuacao['PVP'] = 8
        elif pvp < 2:
            pontuacao['PVP'] = 6
        elif pvp < 2.5:
            pontuacao['PVP'] = 4
        elif pvp < 3:
            pontuacao['PVP'] = 2
        else:
            pontuacao['PVP'] = 0
        
        pontuacao_total += pontuacao['PVP'] * pesos['PVP']
        peso_total += pesos['PVP']
    
    # EV/EBITDA
    if metricas.get('EV_EBITDA') is not None:
        ev_ebitda = metricas['EV_EBITDA']
        if ev_ebitda < 0:  # EBITDA negativo
            pontuacao['EV_EBITDA'] = 0
        elif ev_ebitda < 6:
            pontuacao['EV_EBITDA'] = 10
        elif ev_ebitda < 8:
            pontuacao['EV_EBITDA'] = 8
        elif ev_ebitda < 10:
            pontuacao['EV_EBITDA'] = 6
        elif ev_ebitda < 12:
            pontuacao['EV_EBITDA'] = 4
        elif ev_ebitda < 15:
            pontuacao['EV_EBITDA'] = 2
        else:
            pontuacao['EV_EBITDA'] = 0
        
        pontuacao_total += pontuacao['EV_EBITDA'] * pesos['EV_EBITDA']
        peso_total += pesos['EV_EBITDA']
    
    # Dividend Yield
    if metricas.get('DividendYield') is not None:
        dy = metricas['DividendYield']
        if dy > 5:
            pontuacao['DividendYield'] = 10
        elif dy > 4:
            pontuacao['DividendYield'] = 8
        elif dy > 3:
            pontuacao['DividendYield'] = 6
        elif dy > 2:
            pontuacao['DividendYield'] = 4
        elif dy > 1:
            pontuacao['DividendYield'] = 2
        else:
            pontuacao['DividendYield'] = 0
        
        pontuacao_total += pontuacao['DividendYield'] * pesos['DividendYield']
        peso_total += pesos['DividendYield']
    
    # 3. Sa√∫de Financeira e Liquidez
    # D√≠vida/Patrim√¥nio
    if metricas.get('DividaPatrimonio') is not None:
        div_pat = metricas['DividaPatrimonio']
        if div_pat < 0:  # Patrim√¥nio negativo
            pontuacao['DividaPatrimonio'] = 0
        elif div_pat < 0.5:
            pontuacao['DividaPatrimonio'] = 10
        elif div_pat < 1:
            pontuacao['DividaPatrimonio'] = 8
        elif div_pat < 1.5:
            pontuacao['DividaPatrimonio'] = 6
        elif div_pat < 2:
            pontuacao['DividaPatrimonio'] = 4
        elif div_pat < 3:
            pontuacao['DividaPatrimonio'] = 2
        else:
            pontuacao['DividaPatrimonio'] = 0
        
        pontuacao_total += pontuacao['DividaPatrimonio'] * pesos['DividaPatrimonio']
        peso_total += pesos['DividaPatrimonio']
    
    # Liquidez Corrente
    if metricas.get('LiquidezCorrente') is not None:
        liq_cor = metricas['LiquidezCorrente']
        if liq_cor > 2:
            pontuacao['LiquidezCorrente'] = 10
        elif liq_cor > 1.5:
            pontuacao['LiquidezCorrente'] = 8
        elif liq_cor > 1.2:
            pontuacao['LiquidezCorrente'] = 6
        elif liq_cor > 1:
            pontuacao['LiquidezCorrente'] = 4
        elif liq_cor > 0.8:
            pontuacao['LiquidezCorrente'] = 2
        else:
            pontuacao['LiquidezCorrente'] = 0
        
        pontuacao_total += pontuacao['LiquidezCorrente'] * pesos['LiquidezCorrente']
        peso_total += pesos['LiquidezCorrente']
    
    # Payout
    if metricas.get('Payout') is not None:
        payout = metricas['Payout']
        if payout < 0:  # Lucro negativo
            pontuacao['Payout'] = 0
        elif payout < 30:
            pontuacao['Payout'] = 6  # Baixo payout pode indicar reten√ß√£o para crescimento
        elif payout < 50:
            pontuacao['Payout'] = 8
        elif payout < 70:
            pontuacao['Payout'] = 10  # Payout ideal
        elif payout < 90:
            pontuacao['Payout'] = 6
        elif payout < 100:
            pontuacao['Payout'] = 4
        else:
            pontuacao['Payout'] = 2  # Payout acima de 100% pode ser insustent√°vel
        
        pontuacao_total += pontuacao['Payout'] * pesos['Payout']
        peso_total += pesos['Payout']
    
    # Calcular pontua√ß√£o final normalizada (0-10)
    if peso_total > 0:
        pontuacao_final = pontuacao_total / peso_total
    else:
        pontuacao_final = 0
    
    return pontuacao, pontuacao_final

def classificar_acao(pontuacao_final, metricas):
    """Classifica a a√ß√£o em uma das categorias do Pro Picks"""
    # Definir crit√©rios para cada categoria
    categorias = []
    
    # Melhores A√ß√µes Brasileiras (pontua√ß√£o geral alta)
    if pontuacao_final >= 7:
        categorias.append("Melhores A√ß√µes Brasileiras")
    
    # Empresas S√≥lidas (boa lucratividade e solidez financeira)
    if (metricas.get('ROE', 0) or 0) > 10 and (metricas.get('DividaPatrimonio', 0) or 0) < 1.5:
        categorias.append("Empresas S√≥lidas")
    
    # A√ß√µes Defensivas (bom dividend yield e baixa volatilidade)
    if (metricas.get('DividendYield', 0) or 0) > 3 and (metricas.get('Payout', 0) or 0) < 80:
        categorias.append("A√ß√µes Defensivas")
    
    # A√ß√µes Baratas (baixos m√∫ltiplos)
    if ((metricas.get('PL', 0) or 0) < 15 and (metricas.get('PL', 0) or 0) > 0) or ((metricas.get('PVP', 0) or 0) < 1.5 and (metricas.get('PVP', 0) or 0) > 0):
        categorias.append("A√ß√µes Baratas")
    
    # Se n√£o se encaixar em nenhuma categoria espec√≠fica
    if not categorias:
        if pontuacao_final >= 5:
            categorias.append("Potencial Moderado")
        else:
            categorias.append("Baixo Potencial")
    
    return categorias

def classificar_cenario_macroeconomico():
    """Classifica o cen√°rio macroecon√¥mico atual"""
    # Em uma implementa√ß√£o real, isso seria baseado em dados do Banco Central, IBGE, etc.
    # Para esta simula√ß√£o, vamos permitir que o usu√°rio selecione o cen√°rio
    
    return st.sidebar.selectbox(
        "Cen√°rio Macroecon√¥mico Atual",
        ["Expans√£o", "Desacelera√ß√£o", "Recess√£o", "Recupera√ß√£o"],
        index=1,  # Default: Desacelera√ß√£o
        help="Selecione o cen√°rio macroecon√¥mico atual para ajustar as recomenda√ß√µes"
    )

def sugerir_alocacao(perfil, cenario):
    """Sugere aloca√ß√£o baseada no perfil do investidor e cen√°rio macroecon√¥mico"""
    alocacao = {}
    
    if perfil == "Conservador":
        if cenario == "Expans√£o":
            alocacao = {
                "A√ß√µes Defensivas": "60%",
                "Empresas S√≥lidas": "30%",
                "A√ß√µes Baratas": "10%",
                "Melhores A√ß√µes": "0%"
            }
        elif cenario == "Desacelera√ß√£o":
            alocacao = {
                "A√ß√µes Defensivas": "70%",
                "Empresas S√≥lidas": "20%",
                "A√ß√µes Baratas": "10%",
                "Melhores A√ß√µes": "0%"
            }
        elif cenario == "Recess√£o":
            alocacao = {
                "A√ß√µes Defensivas": "80%",
                "Empresas S√≥lidas": "15%",
                "A√ß√µes Baratas": "5%",
                "Melhores A√ß√µes": "0%"
            }
        elif cenario == "Recupera√ß√£o":
            alocacao = {
                "A√ß√µes Defensivas": "65%",
                "Empresas S√≥lidas": "25%",
                "A√ß√µes Baratas": "10%",
                "Melhores A√ß√µes": "0%"
            }
    
    elif perfil == "Moderado":
        if cenario == "Expans√£o":
            alocacao = {
                "A√ß√µes Defensivas": "30%",
                "Empresas S√≥lidas": "40%",
                "A√ß√µes Baratas": "15%",
                "Melhores A√ß√µes": "15%"
            }
        elif cenario == "Desacelera√ß√£o":
            alocacao = {
                "A√ß√µes Defensivas": "40%",
                "Empresas S√≥lidas": "35%",
                "A√ß√µes Baratas": "15%",
                "Melhores A√ß√µes": "10%"
            }
        elif cenario == "Recess√£o":
            alocacao = {
                "A√ß√µes Defensivas": "50%",
                "Empresas S√≥lidas": "30%",
                "A√ß√µes Baratas": "15%",
                "Melhores A√ß√µes": "5%"
            }
        elif cenario == "Recupera√ß√£o":
            alocacao = {
                "A√ß√µes Defensivas": "25%",
                "Empresas S√≥lidas": "35%",
                "A√ß√µes Baratas": "20%",
                "Melhores A√ß√µes": "20%"
            }
    
    elif perfil == "Agressivo":
        if cenario == "Expans√£o":
            alocacao = {
                "A√ß√µes Defensivas": "10%",
                "Empresas S√≥lidas": "25%",
                "A√ß√µes Baratas": "25%",
                "Melhores A√ß√µes": "40%"
            }
        elif cenario == "Desacelera√ß√£o":
            alocacao = {
                "A√ß√µes Defensivas": "20%",
                "Empresas S√≥lidas": "30%",
                "A√ß√µes Baratas": "25%",
                "Melhores A√ß√µes": "25%"
            }
        elif cenario == "Recess√£o":
            alocacao = {
                "A√ß√µes Defensivas": "30%",
                "Empresas S√≥lidas": "30%",
                "A√ß√µes Baratas": "30%",
                "Melhores A√ß√µes": "10%"
            }
        elif cenario == "Recupera√ß√£o":
            alocacao = {
                "A√ß√µes Defensivas": "5%",
                "Empresas S√≥lidas": "25%",
                "A√ß√µes Baratas": "30%",
                "Melhores A√ß√µes": "40%"
            }
    
    return alocacao

def gerar_grafico_pontuacao(pontuacoes, titulo):
    """Gera gr√°fico de barras para visualiza√ß√£o das pontua√ß√µes"""
    # Ordenar pontua√ß√µes
    pontuacoes_ordenadas = sorted(pontuacoes.items(), key=lambda x: x[1], reverse=True)
    
    # Criar dataframe
    df = pd.DataFrame(pontuacoes_ordenadas, columns=['Crit√©rio', 'Pontua√ß√£o'])
    
    # Criar gr√°fico com Plotly
    fig = px.bar(
        df, 
        x='Crit√©rio', 
        y='Pontua√ß√£o',
        title=titulo,
        color='Pontua√ß√£o',
        color_continuous_scale='RdYlGn',
        range_y=[0, 10]
    )
    
    fig.update_layout(
        xaxis_title="Crit√©rio",
        yaxis_title="Pontua√ß√£o (0-10)",
        height=400
    )
    
    return fig

def gerar_grafico_radar(pontuacoes, titulo):
    """Gera gr√°fico radar para visualiza√ß√£o das pontua√ß√µes"""
    # Preparar dados
    categorias = list(pontuacoes.keys())
    valores = list(pontuacoes.values())
    
    # Criar gr√°fico radar
    fig = go.Figure()
    
    fig.add_trace(go.Scatterpolar(
        r=valores,
        theta=categorias,
        fill='toself',
        name='Pontua√ß√£o'
    ))
    
    fig.update_layout(
        polar=dict(
            radialaxis=dict(
                visible=True,
                range=[0, 10]
            )
        ),
        title=titulo,
        height=500
    )
    
    return fig

def gerar_grafico_alocacao(alocacao, titulo):
    """Gera gr√°fico de pizza para visualiza√ß√£o da aloca√ß√£o sugerida"""
    # Preparar dados
    categorias = list(alocacao.keys())
    valores = [float(v.replace('%', '')) for v in alocacao.values()]
    
    # Criar gr√°fico de pizza
    fig = px.pie(
        names=categorias,
        values=valores,
        title=titulo,
        color_discrete_sequence=px.colors.sequential.RdBu
    )
    
    fig.update_traces(textposition='inside', textinfo='percent+label')
    
    fig.update_layout(
        height=400
    )
    
    return fig

def formatar_metrica(valor, formato):
    """Formata uma m√©trica para exibi√ß√£o"""
    if valor is None:
        return "N/A"
    
    if formato == "percentual":
        return f"{valor:.2f}%"
    elif formato == "decimal":
        return f"{valor:.2f}"
    elif formato == "monetario":
        return f"R$ {valor:.2f}"
    elif formato == "inteiro":
        return f"{int(valor):,}".replace(',', '.')
    else:
        return str(valor)

def criar_carteira_recomendada(resultados, categoria, max_acoes=5):
    """Cria uma carteira recomendada com base nos resultados e categoria"""
    # Filtrar a√ß√µes da categoria especificada
    acoes_categoria = [r for r in resultados if categoria in r['Categorias']]
    
    # Ordenar por pontua√ß√£o
    acoes_ordenadas = sorted(acoes_categoria, key=lambda x: x['PontuacaoFinal'], reverse=True)
    
    # Limitar ao n√∫mero m√°ximo de a√ß√µes
    return acoes_ordenadas[:max_acoes]

# Defini√ß√£o dos pesos padr√£o para os crit√©rios
def obter_pesos_padrao():
    return {
        # Demonstra√ß√µes Financeiras e Lucratividade (25%)
        'ROE': 6,
        'ROIC': 6,
        'MargemLiquida': 7,
        'CrescimentoLucros': 6,
        
        # Avalia√ß√£o e M√∫ltiplos (20%)
        'PL': 7,
        'PVP': 5,
        'EV_EBITDA': 5,
        'DividendYield': 3,
        
        # Sa√∫de Financeira e Liquidez (20%)
        'DividaPatrimonio': 7,
        'LiquidezCorrente': 5,
        'Payout': 3,
        
        # Outros crit√©rios n√£o implementados nesta vers√£o simplificada
        # seriam os 35% restantes
    }

# Interface do Streamlit
def main():
    # T√≠tulo e descri√ß√£o
    st.title("Pro Picks IA - Melhores A√ß√µes Brasileiras")
    st.markdown("""
    Esta aplica√ß√£o simula o funcionamento do sistema Pro Picks IA para sele√ß√£o das melhores a√ß√µes brasileiras,
    utilizando crit√©rios fundamentalistas, an√°lise t√©cnica e classifica√ß√£o do cen√°rio macroecon√¥mico.
    """)
    
    # Sidebar para configura√ß√µes
    st.sidebar.title("Configura√ß√µes")
    
    # Op√ß√£o para atualizar dados
    if st.sidebar.button("Atualizar Dados"):
        with st.spinner("Atualizando dados..."):
            # Limpar cache de dados
            if os.path.exists(os.path.join(DATA_DIR, "lista_acoes.json")):
                os.remove(os.path.join(DATA_DIR, "lista_acoes.json"))
            
            # Obter lista atualizada
            acoes = obter_lista_acoes()
            st.sidebar.success(f"Dados atualizados! {len(acoes)} a√ß√µes dispon√≠veis.")
    
    # Classifica√ß√£o do cen√°rio macroecon√¥mico
    cenario = classificar_cenario_macroeconomico()
    
    # Perfil do investidor
    perfil = st.sidebar.selectbox(
        "Perfil do Investidor",
        ["Conservador", "Moderado", "Agressivo"],
        index=1,  # Default: Moderado
        help="Selecione seu perfil de investidor para ajustar as recomenda√ß√µes"
    )
    
    # Ajuste de pesos
    st.sidebar.subheader("Ajuste de Pesos dos Crit√©rios")
    mostrar_ajuste_pesos = st.sidebar.checkbox("Personalizar Pesos", value=False)
    
    # Obter pesos padr√£o
    pesos = obter_pesos_padrao()
    
    # Permitir ajuste de pesos
    if mostrar_ajuste_pesos:
        st.sidebar.markdown("**Lucratividade (25%)**")
        pesos['ROE'] = st.sidebar.slider("ROE (Retorno sobre Patrim√¥nio)", 0, 10, 6)
        pesos['ROIC'] = st.sidebar.slider("ROIC (Retorno sobre Capital Investido)", 0, 10, 6)
        pesos['MargemLiquida'] = st.sidebar.slider("Margem L√≠quida", 0, 10, 7)
        pesos['CrescimentoLucros'] = st.sidebar.slider("Crescimento de Lucros", 0, 10, 6)
        
        st.sidebar.markdown("**Avalia√ß√£o (20%)**")
        pesos['PL'] = st.sidebar.slider("P/L (Pre√ßo/Lucro)", 0, 10, 7)
        pesos['PVP'] = st.sidebar.slider("P/VP (Pre√ßo/Valor Patrimonial)", 0, 10, 5)
        pesos['EV_EBITDA'] = st.sidebar.slider("EV/EBITDA", 0, 10, 5)
        pesos['DividendYield'] = st.sidebar.slider("Dividend Yield", 0, 10, 3)
        
        st.sidebar.markdown("**Sa√∫de Financeira (20%)**")
        pesos['DividaPatrimonio'] = st.sidebar.slider("D√≠vida/Patrim√¥nio", 0, 10, 7)
        pesos['LiquidezCorrente'] = st.sidebar.slider("Liquidez Corrente", 0, 10, 5)
        pesos['Payout'] = st.sidebar.slider("Payout", 0, 10, 3)
    
    # N√∫mero de a√ß√µes a analisar
    num_acoes = st.sidebar.slider(
        "N√∫mero de A√ß√µes a Analisar",
        min_value=10,
        max_value=100,
        value=30,
        step=10,
        help="Selecione quantas a√ß√µes ser√£o analisadas (mais a√ß√µes = mais tempo de processamento)"
    )
    
    # Bot√£o para iniciar an√°lise
    iniciar_analise = st.sidebar.button("Iniciar An√°lise")
    
    # Exibir informa√ß√µes sobre o cen√°rio macroecon√¥mico
    st.subheader(f"Cen√°rio Macroecon√¥mico: {cenario}")
    
    col1, col2 = st.columns(2)
    
    with col1:
        if cenario == "Expans√£o":
            st.info("Crescimento econ√¥mico forte, infla√ß√£o controlada. Favorece empresas c√≠clicas e de crescimento.")
        elif cenario == "Desacelera√ß√£o":
            st.warning("Crescimento econ√¥mico em queda, infla√ß√£o ainda presente. Favorece empresas de qualidade e setores defensivos.")
        elif cenario == "Recess√£o":
            st.error("Crescimento negativo, press√µes deflacion√°rias. Favorece empresas com balan√ßos s√≥lidos e baixo endividamento.")
        elif cenario == "Recupera√ß√£o":
            st.success("Retomada do crescimento ap√≥s per√≠odo de contra√ß√£o. Favorece empresas c√≠clicas de qualidade e setores mais sens√≠veis.")
    
    with col2:
        st.subheader(f"Perfil do Investidor: {perfil}")
        if perfil == "Conservador":
            st.info("Prioriza preserva√ß√£o de capital e renda. Prefer√™ncia por empresas est√°veis e pagadoras de dividendos.")
        elif perfil == "Moderado":
            st.info("Busca equil√≠brio entre crescimento e seguran√ßa. Diversifica√ß√£o entre diferentes tipos de empresas.")
        elif perfil == "Agressivo":
            st.info("Foco em crescimento e valoriza√ß√£o. Maior toler√¢ncia a risco e volatilidade.")
    
    # Aloca√ß√£o sugerida
    alocacao = sugerir_alocacao(perfil, cenario)
    
    # Gr√°fico de aloca√ß√£o sugerida
    fig_alocacao = gerar_grafico_alocacao(
        alocacao, 
        f"Aloca√ß√£o Sugerida para Perfil {perfil} em Cen√°rio de {cenario}"
    )
    st.plotly_chart(fig_alocacao, use_container_width=True)
    
    # Iniciar an√°lise quando solicitado
    if iniciar_analise:
        # Obter lista de a√ß√µes
        acoes = obter_lista_acoes()
        
        # Limitar ao n√∫mero selecionado
        acoes = acoes[:num_acoes]
        
        # Barra de progresso
        progress_bar = st.progress(0)
        status_text = st.empty()
        
        # Resultados
        resultados = []
        
        # Analisar cada a√ß√£o
        for i, ticker in enumerate(acoes):
            # Atualizar progresso
            progress = (i + 1) / len(acoes)
            progress_bar.progress(progress)
            status_text.text(f"Analisando {ticker} ({i+1}/{len(acoes)})")
            
            # Carregar dados
            dados = carregar_dados_acao(ticker)
            
            if dados:
                # Calcular m√©tricas
                metricas = calcular_metricas_fundamentalistas(dados)
                
                if metricas:
                    # Calcular pontua√ß√£o
                    pontuacoes, pontuacao_final = calcular_pontuacao(metricas, pesos)
                    
                    # Classificar a√ß√£o
                    categorias = classificar_acao(pontuacao_final, metricas)
                    
                    # Adicionar aos resultados
                    resultados.append({
                        'Ticker': ticker,
                        'Nome': metricas.get('Nome', 'N/A'),
                        'Setor': metricas.get('Setor', 'N/A'),
                        'Metricas': metricas,
                        'Pontuacoes': pontuacoes,
                        'PontuacaoFinal': pontuacao_final,
                        'Categorias': categorias
                    })
        
        # Limpar barra de progresso e status
        progress_bar.empty()
        status_text.empty()
        
        # Exibir resultados
        if resultados:
            st.subheader("Resultados da An√°lise")
            
            # Ordenar resultados por pontua√ß√£o
            resultados_ordenados = sorted(resultados, key=lambda x: x['PontuacaoFinal'], reverse=True)
            
            # Criar abas para diferentes visualiza√ß√µes
            tab1, tab2, tab3, tab4 = st.tabs(["Ranking Geral", "Carteiras Recomendadas", "An√°lise por Setor", "Detalhes por A√ß√£o"])
            
            with tab1:
                # Criar dataframe para exibi√ß√£o
                df_ranking = pd.DataFrame([
                    {
                        'Ticker': r['Ticker'],
                        'Nome': r['Nome'],
                        'Setor': r['Setor'],
                        'Pontua√ß√£o': round(r['PontuacaoFinal'], 2),
                        'Categorias': ', '.join(r['Categorias']),
                        'P/L': formatar_metrica(r['Metricas'].get('PL'), 'decimal'),
                        'P/VP': formatar_metrica(r['Metricas'].get('PVP'), 'decimal'),
                        'ROE': formatar_metrica(r['Metricas'].get('ROE'), 'percentual'),
                        'Div. Yield': formatar_metrica(r['Metricas'].get('DividendYield'), 'percentual'),
                        'D√≠v/Pat': formatar_metrica(r['Metricas'].get('DividaPatrimonio'), 'decimal')
                    }
                    for r in resultados_ordenados
                ])
                
                # Exibir tabela
                st.dataframe(df_ranking, use_container_width=True)
                
                # Gr√°fico de pontua√ß√µes
                pontuacoes_finais = {r['Ticker']: r['PontuacaoFinal'] for r in resultados_ordenados[:15]}
                fig = px.bar(
                    x=list(pontuacoes_finais.keys()),
                    y=list(pontuacoes_finais.values()),
                    title="Top 15 A√ß√µes por Pontua√ß√£o",
                    labels={'x': 'Ticker', 'y': 'Pontua√ß√£o (0-10)'},
                    color=list(pontuacoes_finais.values()),
                    color_continuous_scale='RdYlGn'
                )
                st.plotly_chart(fig, use_container_width=True)
            
            with tab2:
                # Criar carteiras recomendadas
                st.subheader("Carteiras Recomendadas")
                
                # Melhores A√ß√µes Brasileiras
                st.markdown("### üèÜ Melhores A√ß√µes Brasileiras")
                carteira_melhores = criar_carteira_recomendada(resultados_ordenados, "Melhores A√ß√µes Brasileiras")
                
                if carteira_melhores:
                    df_melhores = pd.DataFrame([
                        {
                            'Ticker': r['Ticker'],
                            'Nome': r['Nome'],
                            'Setor': r['Setor'],
                            'Pontua√ß√£o': round(r['PontuacaoFinal'], 2),
                            'P/L': formatar_metrica(r['Metricas'].get('PL'), 'decimal'),
                            'ROE': formatar_metrica(r['Metricas'].get('ROE'), 'percentual'),
                            'Div. Yield': formatar_metrica(r['Metricas'].get('DividendYield'), 'percentual')
                        }
                        for r in carteira_melhores
                    ])
                    st.dataframe(df_melhores, use_container_width=True)
                else:
                    st.info("Nenhuma a√ß√£o classificada nesta categoria.")
                
                # Empresas S√≥lidas
                st.markdown("### üè¢ Empresas S√≥lidas do Brasil")
                carteira_solidas = criar_carteira_recomendada(resultados_ordenados, "Empresas S√≥lidas")
                
                if carteira_solidas:
                    df_solidas = pd.DataFrame([
                        {
                            'Ticker': r['Ticker'],
                            'Nome': r['Nome'],
                            'Setor': r['Setor'],
                            'Pontua√ß√£o': round(r['PontuacaoFinal'], 2),
                            'ROE': formatar_metrica(r['Metricas'].get('ROE'), 'percentual'),
                            'ROIC': formatar_metrica(r['Metricas'].get('ROIC'), 'percentual'),
                            'D√≠v/Pat': formatar_metrica(r['Metricas'].get('DividaPatrimonio'), 'decimal')
                        }
                        for r in carteira_solidas
                    ])
                    st.dataframe(df_solidas, use_container_width=True)
                else:
                    st.info("Nenhuma a√ß√£o classificada nesta categoria.")
                
                # A√ß√µes Defensivas
                st.markdown("### üõ°Ô∏è A√ß√µes Defensivas do Brasil")
                carteira_defensivas = criar_carteira_recomendada(resultados_ordenados, "A√ß√µes Defensivas")
                
                if carteira_defensivas:
                    df_defensivas = pd.DataFrame([
                        {
                            'Ticker': r['Ticker'],
                            'Nome': r['Nome'],
                            'Setor': r['Setor'],
                            'Pontua√ß√£o': round(r['PontuacaoFinal'], 2),
                            'Div. Yield': formatar_metrica(r['Metricas'].get('DividendYield'), 'percentual'),
                            'Payout': formatar_metrica(r['Metricas'].get('Payout'), 'percentual'),
                            'Liq. Corrente': formatar_metrica(r['Metricas'].get('LiquidezCorrente'), 'decimal')
                        }
                        for r in carteira_defensivas
                    ])
                    st.dataframe(df_defensivas, use_container_width=True)
                else:
                    st.info("Nenhuma a√ß√£o classificada nesta categoria.")
                
                # A√ß√µes Baratas
                st.markdown("### üí∞ A√ß√µes Baratas do Brasil")
                carteira_baratas = criar_carteira_recomendada(resultados_ordenados, "A√ß√µes Baratas")
                
                if carteira_baratas:
                    df_baratas = pd.DataFrame([
                        {
                            'Ticker': r['Ticker'],
                            'Nome': r['Nome'],
                            'Setor': r['Setor'],
                            'Pontua√ß√£o': round(r['PontuacaoFinal'], 2),
                            'P/L': formatar_metrica(r['Metricas'].get('PL'), 'decimal'),
                            'P/VP': formatar_metrica(r['Metricas'].get('PVP'), 'decimal'),
                            'EV/EBITDA': formatar_metrica(r['Metricas'].get('EV_EBITDA'), 'decimal')
                        }
                        for r in carteira_baratas
                    ])
                    st.dataframe(df_baratas, use_container_width=True)
                else:
                    st.info("Nenhuma a√ß√£o classificada nesta categoria.")
                
                # Carteira Personalizada para o Perfil
                st.markdown(f"### üéØ Carteira Personalizada para Perfil {perfil}")
                
                # Criar carteira personalizada com base no perfil e cen√°rio
                carteira_personalizada = []
                
                # Determinar n√∫mero de a√ß√µes por categoria com base na aloca√ß√£o sugerida
                num_melhores = max(1, int(float(alocacao.get("Melhores A√ß√µes", "0%").replace("%", "")) / 100 * 10))
                num_solidas = max(1, int(float(alocacao.get("Empresas S√≥lidas", "0%").replace("%", "")) / 100 * 10))
                num_defensivas = max(1, int(float(alocacao.get("A√ß√µes Defensivas", "0%").replace("%", "")) / 100 * 10))
                num_baratas = max(1, int(float(alocacao.get("A√ß√µes Baratas", "0%").replace("%", "")) / 100 * 10))
                
                # Adicionar a√ß√µes de cada categoria
                for r in carteira_melhores[:num_melhores]:
                    if r not in carteira_personalizada:
                        carteira_personalizada.append(r)
                
                for r in carteira_solidas[:num_solidas]:
                    if r not in carteira_personalizada:
                        carteira_personalizada.append(r)
                
                for r in carteira_defensivas[:num_defensivas]:
                    if r not in carteira_personalizada:
                        carteira_personalizada.append(r)
                
                for r in carteira_baratas[:num_baratas]:
                    if r not in carteira_personalizada:
                        carteira_personalizada.append(r)
                
                # Exibir carteira personalizada
                if carteira_personalizada:
                    df_personalizada = pd.DataFrame([
                        {
                            'Ticker': r['Ticker'],
                            'Nome': r['Nome'],
                            'Setor': r['Setor'],
                            'Categorias': ', '.join(r['Categorias']),
                            'Pontua√ß√£o': round(r['PontuacaoFinal'], 2),
                            'P/L': formatar_metrica(r['Metricas'].get('PL'), 'decimal'),
                            'Div. Yield': formatar_metrica(r['Metricas'].get('DividendYield'), 'percentual'),
                            'ROE': formatar_metrica(r['Metricas'].get('ROE'), 'percentual')
                        }
                        for r in carteira_personalizada
                    ])
                    st.dataframe(df_personalizada, use_container_width=True)
                    
                    # Gr√°fico de distribui√ß√£o setorial
                    setores = df_personalizada['Setor'].value_counts()
                    fig_setores = px.pie(
                        names=setores.index,
                        values=setores.values,
                        title="Distribui√ß√£o Setorial da Carteira Personalizada"
                    )
                    st.plotly_chart(fig_setores, use_container_width=True)
                else:
                    st.info("N√£o foi poss√≠vel criar uma carteira personalizada com os dados dispon√≠veis.")
            
            with tab3:
                # An√°lise por setor
                st.subheader("An√°lise por Setor")
                
                # Agrupar resultados por setor
                setores = {}
                for r in resultados:
                    setor = r['Setor']
                    if setor not in setores:
                        setores[setor] = []
                    setores[setor].append(r)
                
                # Pontua√ß√£o m√©dia por setor
                pontuacoes_setor = {
                    setor: sum(r['PontuacaoFinal'] for r in acoes) / len(acoes)
                    for setor, acoes in setores.items() if setor != 'N/A'
                }
                
                # Ordenar setores por pontua√ß√£o
                setores_ordenados = sorted(pontuacoes_setor.items(), key=lambda x: x[1], reverse=True)
                
                # Gr√°fico de pontua√ß√µes por setor
                fig_setores = px.bar(
                    x=[s[0] for s in setores_ordenados],
                    y=[s[1] for s in setores_ordenados],
                    title="Pontua√ß√£o M√©dia por Setor",
                    labels={'x': 'Setor', 'y': 'Pontua√ß√£o M√©dia (0-10)'},
                    color=[s[1] for s in setores_ordenados],
                    color_continuous_scale='RdYlGn'
                )
                st.plotly_chart(fig_setores, use_container_width=True)
                
                # Melhor a√ß√£o por setor
                st.subheader("Melhor A√ß√£o por Setor")
                
                melhores_por_setor = []
                for setor, acoes in setores.items():
                    if setor != 'N/A' and acoes:
                        # Ordenar a√ß√µes do setor por pontua√ß√£o
                        acoes_ordenadas = sorted(acoes, key=lambda x: x['PontuacaoFinal'], reverse=True)
                        # Adicionar a melhor a√ß√£o do setor
                        melhores_por_setor.append(acoes_ordenadas[0])
                
                # Ordenar por pontua√ß√£o
                melhores_por_setor = sorted(melhores_por_setor, key=lambda x: x['PontuacaoFinal'], reverse=True)
                
                # Criar dataframe
                df_melhores_setor = pd.DataFrame([
                    {
                        'Ticker': r['Ticker'],
                        'Nome': r['Nome'],
                        'Setor': r['Setor'],
                        'Pontua√ß√£o': round(r['PontuacaoFinal'], 2),
                        'Categorias': ', '.join(r['Categorias']),
                        'P/L': formatar_metrica(r['Metricas'].get('PL'), 'decimal'),
                        'ROE': formatar_metrica(r['Metricas'].get('ROE'), 'percentual')
                    }
                    for r in melhores_por_setor
                ])
                
                st.dataframe(df_melhores_setor, use_container_width=True)
                
                # Distribui√ß√£o de categorias por setor
                st.subheader("Distribui√ß√£o de Categorias por Setor")
                
                # Contar categorias por setor
                categorias_por_setor = {}
                for r in resultados:
                    setor = r['Setor']
                    if setor != 'N/A':
                        if setor not in categorias_por_setor:
                            categorias_por_setor[setor] = {
                                'Melhores A√ß√µes Brasileiras': 0,
                                'Empresas S√≥lidas': 0,
                                'A√ß√µes Defensivas': 0,
                                'A√ß√µes Baratas': 0,
                                'Outras': 0
                            }
                        
                        # Incrementar contadores de categorias
                        categorias_encontradas = False
                        for categoria in ['Melhores A√ß√µes Brasileiras', 'Empresas S√≥lidas', 'A√ß√µes Defensivas', 'A√ß√µes Baratas']:
                            if categoria in r['Categorias']:
                                categorias_por_setor[setor][categoria] += 1
                                categorias_encontradas = True
                        
                        if not categorias_encontradas:
                            categorias_por_setor[setor]['Outras'] += 1
                
                # Criar dataframe para heatmap
                setores_list = []
                categorias_list = []
                valores_list = []
                
                for setor, categorias in categorias_por_setor.items():
                    for categoria, valor in categorias.items():
                        setores_list.append(setor)
                        categorias_list.append(categoria)
                        valores_list.append(valor)
                
                df_heatmap = pd.DataFrame({
                    'Setor': setores_list,
                    'Categoria': categorias_list,
                    'Valor': valores_list
                })
                
                # Criar heatmap
                fig_heatmap = px.density_heatmap(
                    df_heatmap,
                    x='Setor',
                    y='Categoria',
                    z='Valor',
                    title="Distribui√ß√£o de Categorias por Setor",
                    color_continuous_scale='YlGnBu'
                )
                
                fig_heatmap.update_layout(
                    xaxis_title="Setor",
                    yaxis_title="Categoria",
                    height=500
                )
                
                st.plotly_chart(fig_heatmap, use_container_width=True)
            
            with tab4:
                # Detalhes por a√ß√£o
                st.subheader("Detalhes por A√ß√£o")
                
                # Sele√ß√£o de a√ß√£o
                opcoes_acoes = [(f"{r['Ticker']} - {r['Nome']}") for r in resultados_ordenados]
                acao_selecionada = st.selectbox("Selecione uma a√ß√£o para ver detalhes", opcoes_acoes)
                
                if acao_selecionada:
                    # Extrair ticker da sele√ß√£o
                    ticker_selecionado = acao_selecionada.split(" - ")[0]
                    
                    # Encontrar a√ß√£o nos resultados
                    acao = next((r for r in resultados if r['Ticker'] == ticker_selecionado), None)
                    
                    if acao:
                        # Exibir detalhes da a√ß√£o
                        col1, col2 = st.columns([2, 1])
                        
                        with col1:
                            st.markdown(f"### {acao['Nome']} ({acao['Ticker']})")
                            st.markdown(f"**Setor:** {acao['Setor']}")
                            st.markdown(f"**Categorias:** {', '.join(acao['Categorias'])}")
                            st.markdown(f"**Pontua√ß√£o Final:** {acao['PontuacaoFinal']:.2f}/10")
                            
                            # Gr√°fico de radar das pontua√ß√µes
                            fig_radar = gerar_grafico_radar(
                                acao['Pontuacoes'],
                                f"Pontua√ß√µes por Crit√©rio - {acao['Ticker']}"
                            )
                            st.plotly_chart(fig_radar, use_container_width=True)
                        
                        with col2:
                            # M√©tricas principais
                            st.markdown("### M√©tricas Principais")
                            
                            metricas = acao['Metricas']
                            
                            # Lucratividade
                            st.markdown("#### Lucratividade")
                            col_a, col_b = st.columns(2)
                            col_a.metric("ROE", formatar_metrica(metricas.get('ROE'), 'percentual'))
                            col_b.metric("ROIC", formatar_metrica(metricas.get('ROIC'), 'percentual'))
                            col_a.metric("Margem L√≠quida", formatar_metrica(metricas.get('MargemLiquida'), 'percentual'))
                            col_b.metric("Cresc. Lucros", formatar_metrica(metricas.get('CrescimentoLucros'), 'percentual'))
                            
                            # Avalia√ß√£o
                            st.markdown("#### Avalia√ß√£o")
                            col_a, col_b = st.columns(2)
                            col_a.metric("P/L", formatar_metrica(metricas.get('PL'), 'decimal'))
                            col_b.metric("P/VP", formatar_metrica(metricas.get('PVP'), 'decimal'))
                            col_a.metric("EV/EBITDA", formatar_metrica(metricas.get('EV_EBITDA'), 'decimal'))
                            col_b.metric("Div. Yield", formatar_metrica(metricas.get('DividendYield'), 'percentual'))
                            
                            # Sa√∫de Financeira
                            st.markdown("#### Sa√∫de Financeira")
                            col_a, col_b = st.columns(2)
                            col_a.metric("D√≠vida/Patrim√¥nio", formatar_metrica(metricas.get('DividaPatrimonio'), 'decimal'))
                            col_b.metric("Liquidez Corrente", formatar_metrica(metricas.get('LiquidezCorrente'), 'decimal'))
                            col_a.metric("Payout", formatar_metrica(metricas.get('Payout'), 'percentual'))
                        
                        # Gr√°fico de barras das pontua√ß√µes
                        st.markdown("### Pontua√ß√µes Detalhadas")
                        fig_barras = gerar_grafico_pontuacao(
                            acao['Pontuacoes'],
                            f"Pontua√ß√µes por Crit√©rio - {acao['Ticker']}"
                        )
                        st.plotly_chart(fig_barras, use_container_width=True)
                        
                        # Hist√≥rico de pre√ßos
                        st.markdown("### Hist√≥rico de Pre√ßos")
                        
                        try:
                            # Obter dados hist√≥ricos
                            dados_historicos = yf.Ticker(acao['Ticker']).history(period="1y")
                            
                            if not dados_historicos.empty:
                                # Criar gr√°fico de pre√ßos
                                fig_precos = px.line(
                                    dados_historicos,
                                    y='Close',
                                    title=f"Pre√ßo de Fechamento - {acao['Ticker']} (√öltimo Ano)",
                                    labels={'Close': 'Pre√ßo de Fechamento (R$)', 'index': 'Data'}
                                )
                                
                                st.plotly_chart(fig_precos, use_container_width=True)
                            else:
                                st.info("Dados hist√≥ricos n√£o dispon√≠veis para esta a√ß√£o.")
                        except Exception as e:
                            st.error(f"Erro ao obter dados hist√≥ricos: {e}")
        else:
            st.warning("Nenhum resultado encontrado. Tente ajustar os par√¢metros ou selecionar outras a√ß√µes.")
    
    # Explica√ß√£o da metodologia
    with st.expander("Metodologia de An√°lise"):
        st.markdown("""
        ### Como Funciona o Pro Picks IA

        O Pro Picks IA utiliza uma combina√ß√£o de intelig√™ncia artificial e an√°lise fundamentalista para identificar as melhores oportunidades de investimento no mercado brasileiro. O sistema analisa mais de 250 m√©tricas financeiras de centenas de empresas brasileiras para criar carteiras otimizadas.

        #### Categorias de Crit√©rios e Pesos

        1. **Demonstra√ß√µes Financeiras e Lucratividade (25%)**
           - ROE (Retorno sobre Patrim√¥nio): Avalia a efici√™ncia da empresa em gerar lucros
           - ROIC (Retorno sobre Capital Investido): Mede o retorno gerado por todo o capital investido
           - Margem L√≠quida: Indica a efici√™ncia operacional e capacidade de convers√£o de receitas em lucros
           - Crescimento de Lucros: Avalia a tend√™ncia de crescimento dos lucros ao longo do tempo

        2. **Avalia√ß√£o e M√∫ltiplos (20%)**
           - P/L (Pre√ßo/Lucro): Relaciona o pre√ßo da a√ß√£o com o lucro por a√ß√£o
           - P/VP (Pre√ßo/Valor Patrimonial): Relaciona o pre√ßo da a√ß√£o com seu valor patrimonial
           - EV/EBITDA: Avalia o valor da empresa em rela√ß√£o ao seu EBITDA
           - Dividend Yield: Mede o retorno em dividendos em rela√ß√£o ao pre√ßo da a√ß√£o

        3. **Sa√∫de Financeira e Liquidez (20%)**
           - D√≠vida/Patrim√¥nio: Avalia o n√≠vel de alavancagem financeira da empresa
           - Liquidez Corrente: Mede a capacidade da empresa de pagar suas obriga√ß√µes de curto prazo
           - Payout: Percentual do lucro distribu√≠do como dividendos

        4. **Momento e Tend√™ncias de Pre√ßo (15%)**
           - Performance Relativa: Compara o desempenho da a√ß√£o com o Ibovespa
           - Volatilidade: Avalia a estabilidade do pre√ßo da a√ß√£o
           - Volume de Negocia√ß√£o: Mede a liquidez da a√ß√£o no mercado

        5. **Qualidade e Efici√™ncia (10%)**
           - Giro de Ativos: Mede a efici√™ncia com que a empresa utiliza seus ativos
           - Consist√™ncia de Resultados: Avalia a previsibilidade e estabilidade dos resultados financeiros
           - Qualidade dos Lucros: Compara o lucro cont√°bil com o fluxo de caixa operacional

        6. **Fatores Setoriais e Macroecon√¥micos (10%)**
           - Sensibilidade ao Ciclo Econ√¥mico: Avalia como o setor responde a mudan√ßas no cen√°rio macroecon√¥mico
           - Posi√ß√£o Competitiva no Setor: Avalia a posi√ß√£o da empresa em rela√ß√£o aos concorrentes
           - Exposi√ß√£o a Tend√™ncias de Longo Prazo: Avalia o alinhamento do neg√≥cio com tend√™ncias estruturais

        #### Carteiras Tem√°ticas

        O sistema cria quatro tipos principais de carteiras:

        1. **Melhores A√ß√µes Brasileiras**: A√ß√µes com melhor pontua√ß√£o geral, que podem liderar o mercado
        2. **Empresas S√≥lidas**: Empresas altamente lucrativas, com hist√≥rico de resultados consistentes e forte solidez financeira
        3. **A√ß√µes Defensivas**: Empresas est√°veis e pagadoras de dividendos, em setores mais resilientes a ciclos econ√¥micos
        4. **A√ß√µes Baratas**: A√ß√µes descontadas com fundamentos s√≥lidos, buscando capturar oportunidades de valor

        #### Ajuste ao Cen√°rio Macroecon√¥mico

        O sistema ajusta as recomenda√ß√µes com base no cen√°rio macroecon√¥mico atual:

        - **Expans√£o**: Favorece empresas c√≠clicas e de crescimento
        - **Desacelera√ß√£o**: Favorece empresas de qualidade e setores defensivos
        - **Recess√£o**: Favorece empresas com balan√ßos s√≥lidos e baixo endividamento
        - **Recupera√ß√£o**: Favorece empresas c√≠clicas de qualidade e setores mais sens√≠veis
        """)
    
    # Rodap√©
    st.markdown("---")
    st.markdown("""
    **Pro Picks IA - Simula√ß√£o** | Desenvolvido com base na metodologia do Pro Picks IA do Investing.com
    
    *Aviso: Esta aplica√ß√£o √© apenas uma simula√ß√£o e n√£o constitui recomenda√ß√£o de investimento. Consulte um profissional financeiro antes de tomar decis√µes de investimento.*
    """)

if __name__ == "__main__":
    main()
